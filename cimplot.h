//This file is automatically generated by generator.lua from https://github.com/cimgui/cimgui
//based on implot.h file version 0.1 WIP from Dear ImGui https://github.com/ocornut/imgui
#ifndef CIMGUIPLOT_INCLUDED
#define CIMGUIPLOT_INCLUDED
#include <stdio.h>
#include <stdint.h>
#if defined _WIN32 || defined __CYGWIN__
    #ifdef CIMGUI_NO_EXPORT
        #define API
    #else
        #define API __declspec(dllexport)
    #endif
    #ifndef __GNUC__
    #define snprintf sprintf_s
    #endif
#else
    #ifdef __GNUC__
        #define API  __attribute__((__visibility__("default")))
    #else
        #define API
    #endif
#endif

#if defined __cplusplus
    #define EXTERN extern "C"
#else
    #include <stdarg.h>
    #include <stdbool.h>
    #define EXTERN extern
#endif

#define CIMGUI_API EXTERN API
#define CONST const


#ifdef _MSC_VER
typedef unsigned __int64 ImU64;
#else
//typedef unsigned long long ImU64;
#endif


#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef struct ImPlotStyle ImPlotStyle;
typedef struct ImPlotRange ImPlotRange;

typedef int ImPlotFlags;
typedef int ImAxisFlags;
typedef int ImPlotCol;
typedef int ImPlotStyleVar;
typedef int ImMarker;
typedef enum {
    ImPlotFlags_MousePos = 1 << 0,
    ImPlotFlags_Legend = 1 << 1,
    ImPlotFlags_Highlight = 1 << 2,
    ImPlotFlags_Selection = 1 << 3,
    ImPlotFlags_ContextMenu = 1 << 4,
    ImPlotFlags_Crosshairs = 1 << 5,
    ImPlotFlags_CullData = 1 << 6,
    ImPlotFlags_AntiAliased = 1 << 7,
    ImPlotFlags_Default = ImPlotFlags_MousePos | ImPlotFlags_Legend | ImPlotFlags_Highlight | ImPlotFlags_Selection | ImPlotFlags_ContextMenu | ImPlotFlags_CullData
}ImPlotFlags_;
typedef enum {
    ImAxisFlags_GridLines = 1 << 0,
    ImAxisFlags_TickMarks = 1 << 1,
    ImAxisFlags_TickLabels = 1 << 2,
    ImAxisFlags_Invert = 1 << 3,
    ImAxisFlags_LockMin = 1 << 4,
    ImAxisFlags_LockMax = 1 << 5,
    ImAxisFlags_Adaptive = 1 << 6,
    ImAxisFlags_LogScale = 1 << 7,
    ImAxisFlags_Scientific = 1 << 8,
    ImAxisFlags_Default = ImAxisFlags_GridLines | ImAxisFlags_TickMarks | ImAxisFlags_TickLabels | ImAxisFlags_Adaptive
}ImAxisFlags_;
typedef enum {
    ImPlotCol_Line,
    ImPlotCol_Fill,
    ImPlotCol_MarkerOutline,
    ImPlotCol_MarkerFill,
    ImPlotCol_ErrorBar,
    ImPlotCol_FrameBg,
    ImPlotCol_PlotBg,
    ImPlotCol_PlotBorder,
    ImPlotCol_XAxis,
    ImPlotCol_YAxis,
    ImPlotCol_Selection,
    ImPlotCol_Query,
    ImPlotCol_COUNT
}ImPlotCol_;
typedef enum {
    ImPlotStyleVar_LineWeight,
    ImPlotStyleVar_Marker,
    ImPlotStyleVar_MarkerSize,
    ImPlotStyleVar_MarkerWeight,
    ImPlotStyleVar_ErrorBarSize,
    ImPlotStyleVar_ErrorBarWeight,
    ImPlotStyleVar_COUNT
}ImPlotStyleVar_;
typedef enum {
    ImMarker_None = 1 << 0,
    ImMarker_Circle = 1 << 1,
    ImMarker_Square = 1 << 2,
    ImMarker_Diamond = 1 << 3,
    ImMarker_Up = 1 << 4,
    ImMarker_Down = 1 << 5,
    ImMarker_Left = 1 << 6,
    ImMarker_Right = 1 << 7,
    ImMarker_Cross = 1 << 8,
    ImMarker_Plus = 1 << 9,
    ImMarker_Asterisk = 1 << 10,
}ImMarker_;
struct ImPlotRange
{
    float XMin, XMax, YMin, YMax;
};
struct ImPlotStyle
{
    float LineWeight;
    ImMarker Marker;
    float MarkerSize;
    float MarkerWeight;
    float ErrorBarSize;
    float ErrorBarWeight;
    ImVec4 Colors[ImPlotCol_COUNT];
};
#else

#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRange(void);
CIMGUI_API void ImPlotRange_destroy(ImPlotRange* self);
CIMGUI_API bool ImPlotRange_Contains(ImPlotRange* self,const ImVec2 p);
CIMGUI_API ImPlotStyle* ImPlotStyle_ImPlotStyle(void);
CIMGUI_API void ImPlotStyle_destroy(ImPlotStyle* self);
CIMGUI_API bool igBeginPlot(const char* title_id,const char* x_label,const char* y_label,const ImVec2 size,ImPlotFlags flags,ImAxisFlags x_flags,ImAxisFlags y_flags);
CIMGUI_API void igEndPlot(void);
CIMGUI_API void igSetNextPlotRange(float x_min,float x_max,float y_min,float y_max,ImGuiCond cond);
CIMGUI_API void igSetNextPlotRangeX(float x_min,float x_max,ImGuiCond cond);
CIMGUI_API void igSetNextPlotRangeY(float y_min,float y_max,ImGuiCond cond);
CIMGUI_API bool igIsPlotHovered(void);
CIMGUI_API void igGetPlotMousePos(ImVec2 *pOut);
CIMGUI_API ImPlotRange igGetPlotRange(void);
CIMGUI_API bool igIsPlotQueried(void);
CIMGUI_API ImPlotRange igGetPlotQuery(void);
CIMGUI_API void igPlotFloatPtrInt(const char* label_id,const float* values,int count,int offset,int stride);
CIMGUI_API void igPlotFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void igPlotFnPtr(const char* label_id,ImVec2(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void igPlotBarFloatPtrInt(const char* label_id,const float* values,int count,float width,float shift,int offset,int stride);
CIMGUI_API void igPlotBarFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,float width,int offset,int stride);
CIMGUI_API void igPlotBarFnPtr(const char* label_id,ImVec2(*getter)(void* data,int idx),void* data,int count,float width,int offset);
CIMGUI_API void igPlotBarHFloatPtrInt(const char* label_id,const float* values,int count,float height,float shift,int offset,int stride);
CIMGUI_API void igPlotBarHFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,float height,int offset,int stride);
CIMGUI_API void igPlotBarHFnPtr(const char* label_id,ImVec2(*getter)(void* data,int idx),void* data,int count,float height,int offset);
CIMGUI_API void igPlotErrorBarsFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride);
CIMGUI_API void igPlotErrorBarsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride);
CIMGUI_API void igPlotErrorBarsFnPtr(const char* label_id,ImVec4(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void igPlotLabel(const char* text,float x,float y,bool vertical,const ImVec2 pixel_offset);
CIMGUI_API ImPlotStyle* igGetPlotStyle(void);
CIMGUI_API void igSetPlotPalette(const ImVec4* colors,int num_colors);
CIMGUI_API void igRestorePlotPalette(void);
CIMGUI_API void igPushPlotColorU32(ImPlotCol idx,ImU32 col);
CIMGUI_API void igPushPlotColorVec4(ImPlotCol idx,const ImVec4 col);
CIMGUI_API void igPopPlotColor(int count);
CIMGUI_API void igPushPlotStyleVarFloat(ImPlotStyleVar idx,float val);
CIMGUI_API void igPushPlotStyleVarInt(ImPlotStyleVar idx,int val);
CIMGUI_API void igPopPlotStyleVar(int count);
CIMGUI_API void igShowImPlotDemoWindow(bool* p_open);



#endif //CIMGUIPLOT_INCLUDED




