//This file is automatically generated by generator.lua from https://github.com/cimgui/cimplot
//based on implot.h file version 0.9 WIP from implot https://github.com/epezent/implot

#include "./implot/implot.h"
#include "cimplot.h"



CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointNil(void)
{
    return IM_NEW(ImPlotPoint)();
}
CIMGUI_API void ImPlotPoint_destroy(ImPlotPoint* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointdouble(double _x,double _y)
{
    return IM_NEW(ImPlotPoint)(_x,_y);
}
CIMGUI_API ImPlotPoint* ImPlotPoint_ImPlotPointVec2(const ImVec2 p)
{
    return IM_NEW(ImPlotPoint)(p);
}
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRangeNil(void)
{
    return IM_NEW(ImPlotRange)();
}
CIMGUI_API void ImPlotRange_destroy(ImPlotRange* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRangedouble(double _min,double _max)
{
    return IM_NEW(ImPlotRange)(_min,_max);
}
CIMGUI_API bool ImPlotRange_Contains(ImPlotRange* self,double value)
{
    return self->Contains(value);
}
CIMGUI_API double ImPlotRange_Size(ImPlotRange* self)
{
    return self->Size();
}
CIMGUI_API bool ImPlotLimits_ContainsPlotPoInt(ImPlotLimits* self,const ImPlotPoint p)
{
    return self->Contains(p);
}
CIMGUI_API bool ImPlotLimits_Containsdouble(ImPlotLimits* self,double x,double y)
{
    return self->Contains(x,y);
}
CIMGUI_API ImPlotStyle* ImPlotStyle_ImPlotStyle(void)
{
    return IM_NEW(ImPlotStyle)();
}
CIMGUI_API void ImPlotStyle_destroy(ImPlotStyle* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotInputMap* ImPlotInputMap_ImPlotInputMap(void)
{
    return IM_NEW(ImPlotInputMap)();
}
CIMGUI_API void ImPlotInputMap_destroy(ImPlotInputMap* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotContext* ImPlot_CreateContext()
{
    return ImPlot::CreateContext();
}
CIMGUI_API void ImPlot_DestroyContext(ImPlotContext* ctx)
{
    return ImPlot::DestroyContext(ctx);
}
CIMGUI_API ImPlotContext* ImPlot_GetCurrentContext()
{
    return ImPlot::GetCurrentContext();
}
CIMGUI_API void ImPlot_SetCurrentContext(ImPlotContext* ctx)
{
    return ImPlot::SetCurrentContext(ctx);
}
CIMGUI_API bool ImPlot_BeginPlot(const char* title_id,const char* x_label,const char* y_label,const ImVec2 size,ImPlotFlags flags,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags,ImPlotAxisFlags y2_flags,ImPlotAxisFlags y3_flags)
{
    return ImPlot::BeginPlot(title_id,x_label,y_label,size,flags,x_flags,y_flags,y2_flags,y3_flags);
}
CIMGUI_API void ImPlot_EndPlot()
{
    return ImPlot::EndPlot();
}
CIMGUI_API void ImPlot_PlotLineFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLinedoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLinedoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterdoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsFloatPtrInt(const char* label_id,const float* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsdoublePtrInt(const char* label_id,const double* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsG(const char* label_id,ImPlotPoint(*getter)(void* data,int idx),void* data,int count,int offset)
{
    return ImPlot::PlotStairsG(label_id,getter,data,count,offset);
}
CIMGUI_API void ImPlot_PlotShadedFloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadeddoublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadeddoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys1,const float* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadeddoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys1,const double* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys1,const ImS8* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys1,const ImU8* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys1,const ImS16* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys1,const ImU16* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys1,const ImS32* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys1,const ImU32* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys1,const ImS64* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys1,const ImU64* ys2,int count,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsFloatPtrInt(const char* label_id,const float* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsdoublePtrInt(const char* label_id,const double* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS8PtrInt(const char* label_id,const ImS8* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU8PtrInt(const char* label_id,const ImU8* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS16PtrInt(const char* label_id,const ImS16* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU16PtrInt(const char* label_id,const ImU16* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS32PtrInt(const char* label_id,const ImS32* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU32PtrInt(const char* label_id,const ImU32* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS64PtrInt(const char* label_id,const ImS64* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU64PtrInt(const char* label_id,const ImU64* values,int count,double width,double shift,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,width,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double width,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,width,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHFloatPtrInt(const char* label_id,const float* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHdoublePtrInt(const char* label_id,const double* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS8PtrInt(const char* label_id,const ImS8* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU8PtrInt(const char* label_id,const ImU8* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS16PtrInt(const char* label_id,const ImS16* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU16PtrInt(const char* label_id,const ImU16* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS32PtrInt(const char* label_id,const ImS32* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU32PtrInt(const char* label_id,const ImU32* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS64PtrInt(const char* label_id,const ImS64* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU64PtrInt(const char* label_id,const ImU64* values,int count,double height,double shift,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,values,count,height,shift,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsHU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double height,int offset,int stride)
{
    return ImPlot::PlotBarsH(label_id,xs,ys,count,height,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsS64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsU64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHFloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHdoublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,err,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHFloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHdoublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHS64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBarsHU64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,int offset,int stride)
{
    return ImPlot::PlotErrorBarsH(label_id,xs,ys,neg,pos,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsFloatPtrInt(const char* label_id,const float* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsdoublePtrInt(const char* label_id,const double* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS8PtrInt(const char* label_id,const ImS8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU8PtrInt(const char* label_id,const ImU8* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS16PtrInt(const char* label_id,const ImS16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU16PtrInt(const char* label_id,const ImU16* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS32PtrInt(const char* label_id,const ImS32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU32PtrInt(const char* label_id,const ImU32* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS64PtrInt(const char* label_id,const ImS64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU64PtrInt(const char* label_id,const ImU64* values,int count,double y_ref,double xscale,double x0,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,y_ref,xscale,x0,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotStemsU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double y_ref,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,y_ref,offset,stride);
}
CIMGUI_API void ImPlot_PlotPieChartFloatPtr(const char* const label_ids[],const float* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartdoublePtr(const char* const label_ids[],const double* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS8Ptr(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU8Ptr(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS16Ptr(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU16Ptr(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS32Ptr(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU32Ptr(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartS64Ptr(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotPieChartU64Ptr(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,bool normalize,const char* label_fmt,double angle0)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,normalize,label_fmt,angle0);
}
CIMGUI_API void ImPlot_PlotHeatmapFloatPtr(const char* label_id,const float* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapdoublePtr(const char* label_id,const double* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS8Ptr(const char* label_id,const ImS8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU8Ptr(const char* label_id,const ImU8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS16Ptr(const char* label_id,const ImS16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU16Ptr(const char* label_id,const ImU16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS32Ptr(const char* label_id,const ImS32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU32Ptr(const char* label_id,const ImU32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapS64Ptr(const char* label_id,const ImS64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotHeatmapU64Ptr(const char* label_id,const ImU64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max);
}
CIMGUI_API void ImPlot_PlotDigitalFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitaldoublePtr(const char* label_id,const double* xs,const double* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,offset,stride);
}
CIMGUI_API void ImPlot_PlotImage(const char* label_id,ImTextureID user_texture_id,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col)
{
    return ImPlot::PlotImage(label_id,user_texture_id,bounds_min,bounds_max,uv0,uv1,tint_col);
}
CIMGUI_API void ImPlot_PlotText(const char* text,double x,double y,bool vertical,const ImVec2 pix_offset)
{
    return ImPlot::PlotText(text,x,y,vertical,pix_offset);
}
CIMGUI_API void ImPlot_PlotDummy(const char* label_id)
{
    return ImPlot::PlotDummy(label_id);
}
CIMGUI_API void ImPlot_SetNextPlotLimits(double xmin,double xmax,double ymin,double ymax,ImGuiCond cond)
{
    return ImPlot::SetNextPlotLimits(xmin,xmax,ymin,ymax,cond);
}
CIMGUI_API void ImPlot_SetNextPlotLimitsX(double xmin,double xmax,ImGuiCond cond)
{
    return ImPlot::SetNextPlotLimitsX(xmin,xmax,cond);
}
CIMGUI_API void ImPlot_SetNextPlotLimitsY(double ymin,double ymax,ImGuiCond cond,ImPlotYAxis y_axis)
{
    return ImPlot::SetNextPlotLimitsY(ymin,ymax,cond,y_axis);
}
CIMGUI_API void ImPlot_LinkNextPlotLimits(double* xmin,double* xmax,double* ymin,double* ymax,double* ymin2,double* ymax2,double* ymin3,double* ymax3)
{
    return ImPlot::LinkNextPlotLimits(xmin,xmax,ymin,ymax,ymin2,ymax2,ymin3,ymax3);
}
CIMGUI_API void ImPlot_FitNextPlotAxes(bool x,bool y,bool y2,bool y3)
{
    return ImPlot::FitNextPlotAxes(x,y,y2,y3);
}
CIMGUI_API void ImPlot_SetNextPlotTicksXdoublePtr(const double* values,int n_ticks,const char* const labels[],bool show_default)
{
    return ImPlot::SetNextPlotTicksX(values,n_ticks,labels,show_default);
}
CIMGUI_API void ImPlot_SetNextPlotTicksXdouble(double x_min,double x_max,int n_ticks,const char* const labels[],bool show_default)
{
    return ImPlot::SetNextPlotTicksX(x_min,x_max,n_ticks,labels,show_default);
}
CIMGUI_API void ImPlot_SetNextPlotTicksYdoublePtr(const double* values,int n_ticks,const char* const labels[],bool show_default,ImPlotYAxis y_axis)
{
    return ImPlot::SetNextPlotTicksY(values,n_ticks,labels,show_default,y_axis);
}
CIMGUI_API void ImPlot_SetNextPlotTicksYdouble(double y_min,double y_max,int n_ticks,const char* const labels[],bool show_default,ImPlotYAxis y_axis)
{
    return ImPlot::SetNextPlotTicksY(y_min,y_max,n_ticks,labels,show_default,y_axis);
}
CIMGUI_API void ImPlot_SetPlotYAxis(ImPlotYAxis y_axis)
{
    return ImPlot::SetPlotYAxis(y_axis);
}
CIMGUI_API void ImPlot_HideNextItem(bool hidden,ImGuiCond cond)
{
    return ImPlot::HideNextItem(hidden,cond);
}
CIMGUI_API void ImPlot_PixelsToPlotVec2(ImPlotPoint *pOut,const ImVec2 pix,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PixelsToPlot(pix,y_axis);
}
CIMGUI_API void ImPlot_PixelsToPlotFloat(ImPlotPoint *pOut,float x,float y,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PixelsToPlot(x,y,y_axis);
}
CIMGUI_API void ImPlot_PlotToPixelsPlotPoInt(ImVec2 *pOut,const ImPlotPoint plt,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PlotToPixels(plt,y_axis);
}
CIMGUI_API void ImPlot_PlotToPixelsdouble(ImVec2 *pOut,double x,double y,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::PlotToPixels(x,y,y_axis);
}
CIMGUI_API void ImPlot_GetPlotPos(ImVec2 *pOut)
{
    *pOut = ImPlot::GetPlotPos();
}
CIMGUI_API void ImPlot_GetPlotSize(ImVec2 *pOut)
{
    *pOut = ImPlot::GetPlotSize();
}
CIMGUI_API bool ImPlot_IsPlotHovered()
{
    return ImPlot::IsPlotHovered();
}
CIMGUI_API bool ImPlot_IsPlotXAxisHovered()
{
    return ImPlot::IsPlotXAxisHovered();
}
CIMGUI_API bool ImPlot_IsPlotYAxisHovered(ImPlotYAxis y_axis)
{
    return ImPlot::IsPlotYAxisHovered(y_axis);
}
CIMGUI_API void ImPlot_GetPlotMousePos(ImPlotPoint *pOut,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::GetPlotMousePos(y_axis);
}
CIMGUI_API void ImPlot_GetPlotLimits(ImPlotLimits *pOut,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::GetPlotLimits(y_axis);
}
CIMGUI_API bool ImPlot_IsPlotQueried()
{
    return ImPlot::IsPlotQueried();
}
CIMGUI_API void ImPlot_GetPlotQuery(ImPlotLimits *pOut,ImPlotYAxis y_axis)
{
    *pOut = ImPlot::GetPlotQuery(y_axis);
}
CIMGUI_API void ImPlot_AnnotateStr(double x,double y,const ImVec2 pix_offset,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateV(x,y,pix_offset,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateV(x,y,pix_offset,color,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateVStr(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args)
{
    return ImPlot::AnnotateV(x,y,pix_offset,fmt,args);
}
CIMGUI_API void ImPlot_AnnotateVVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,va_list args)
{
    return ImPlot::AnnotateV(x,y,pix_offset,color,fmt,args);
}
CIMGUI_API void ImPlot_AnnotateClampedStr(double x,double y,const ImVec2 pix_offset,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateClampedV(x,y,pix_offset,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateClampedVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotateClampedV(x,y,pix_offset,color,fmt,args);
    va_end(args);
}
CIMGUI_API void ImPlot_AnnotateClampedVStr(double x,double y,const ImVec2 pix_offset,const char* fmt,va_list args)
{
    return ImPlot::AnnotateClampedV(x,y,pix_offset,fmt,args);
}
CIMGUI_API void ImPlot_AnnotateClampedVVec4(double x,double y,const ImVec2 pix_offset,const ImVec4 color,const char* fmt,va_list args)
{
    return ImPlot::AnnotateClampedV(x,y,pix_offset,color,fmt,args);
}
CIMGUI_API bool ImPlot_DragLineX(const char* id,double* x_value,bool show_label,const ImVec4 col,float thickness)
{
    return ImPlot::DragLineX(id,x_value,show_label,col,thickness);
}
CIMGUI_API bool ImPlot_DragLineY(const char* id,double* y_value,bool show_label,const ImVec4 col,float thickness)
{
    return ImPlot::DragLineY(id,y_value,show_label,col,thickness);
}
CIMGUI_API bool ImPlot_DragPoint(const char* id,double* x,double* y,bool show_label,const ImVec4 col,float radius)
{
    return ImPlot::DragPoint(id,x,y,show_label,col,radius);
}
CIMGUI_API void ImPlot_SetLegendLocation(ImPlotLocation location,ImPlotOrientation orientation,bool outside)
{
    return ImPlot::SetLegendLocation(location,orientation,outside);
}
CIMGUI_API void ImPlot_SetMousePosLocation(ImPlotLocation location)
{
    return ImPlot::SetMousePosLocation(location);
}
CIMGUI_API bool ImPlot_IsLegendEntryHovered(const char* label_id)
{
    return ImPlot::IsLegendEntryHovered(label_id);
}
CIMGUI_API bool ImPlot_BeginLegendDragDropSource(const char* label_id,ImGuiDragDropFlags flags)
{
    return ImPlot::BeginLegendDragDropSource(label_id,flags);
}
CIMGUI_API void ImPlot_EndLegendDragDropSource()
{
    return ImPlot::EndLegendDragDropSource();
}
CIMGUI_API bool ImPlot_BeginLegendPopup(const char* label_id,ImGuiMouseButton mouse_button)
{
    return ImPlot::BeginLegendPopup(label_id,mouse_button);
}
CIMGUI_API void ImPlot_EndLegendPopup()
{
    return ImPlot::EndLegendPopup();
}
CIMGUI_API ImPlotStyle* ImPlot_GetStyle()
{
    return &ImPlot::GetStyle();
}
CIMGUI_API void ImPlot_StyleColorsAuto(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsAuto(dst);
}
CIMGUI_API void ImPlot_StyleColorsClassic(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsClassic(dst);
}
CIMGUI_API void ImPlot_StyleColorsDark(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsDark(dst);
}
CIMGUI_API void ImPlot_StyleColorsLight(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsLight(dst);
}
CIMGUI_API void ImPlot_PushStyleColorU32(ImPlotCol idx,ImU32 col)
{
    return ImPlot::PushStyleColor(idx,col);
}
CIMGUI_API void ImPlot_PushStyleColorVec4(ImPlotCol idx,const ImVec4 col)
{
    return ImPlot::PushStyleColor(idx,col);
}
CIMGUI_API void ImPlot_PopStyleColor(int count)
{
    return ImPlot::PopStyleColor(count);
}
CIMGUI_API void ImPlot_PushStyleVarFloat(ImPlotStyleVar idx,float val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PushStyleVarInt(ImPlotStyleVar idx,int val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PushStyleVarVec2(ImPlotStyleVar idx,const ImVec2 val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PopStyleVar(int count)
{
    return ImPlot::PopStyleVar(count);
}
CIMGUI_API void ImPlot_SetNextLineStyle(const ImVec4 col,float weight)
{
    return ImPlot::SetNextLineStyle(col,weight);
}
CIMGUI_API void ImPlot_SetNextFillStyle(const ImVec4 col,float alpha_mod)
{
    return ImPlot::SetNextFillStyle(col,alpha_mod);
}
CIMGUI_API void ImPlot_SetNextMarkerStyle(ImPlotMarker marker,float size,const ImVec4 fill,float weight,const ImVec4 outline)
{
    return ImPlot::SetNextMarkerStyle(marker,size,fill,weight,outline);
}
CIMGUI_API void ImPlot_SetNextErrorBarStyle(const ImVec4 col,float size,float weight)
{
    return ImPlot::SetNextErrorBarStyle(col,size,weight);
}
CIMGUI_API void ImPlot_GetLastItemColor(ImVec4 *pOut)
{
    *pOut = ImPlot::GetLastItemColor();
}
CIMGUI_API const char* ImPlot_GetStyleColorName(ImPlotCol idx)
{
    return ImPlot::GetStyleColorName(idx);
}
CIMGUI_API const char* ImPlot_GetMarkerName(ImPlotMarker idx)
{
    return ImPlot::GetMarkerName(idx);
}
CIMGUI_API void ImPlot_PushColormapPlotColormap(ImPlotColormap colormap)
{
    return ImPlot::PushColormap(colormap);
}
CIMGUI_API void ImPlot_PushColormapVec4Ptr(const ImVec4* colormap,int size)
{
    return ImPlot::PushColormap(colormap,size);
}
CIMGUI_API void ImPlot_PopColormap(int count)
{
    return ImPlot::PopColormap(count);
}
CIMGUI_API void ImPlot_SetColormapVec4Ptr(const ImVec4* colormap,int size)
{
    return ImPlot::SetColormap(colormap,size);
}
CIMGUI_API void ImPlot_SetColormapPlotColormap(ImPlotColormap colormap,int samples)
{
    return ImPlot::SetColormap(colormap,samples);
}
CIMGUI_API int ImPlot_GetColormapSize()
{
    return ImPlot::GetColormapSize();
}
CIMGUI_API void ImPlot_GetColormapColor(ImVec4 *pOut,int index)
{
    *pOut = ImPlot::GetColormapColor(index);
}
CIMGUI_API void ImPlot_LerpColormap(ImVec4 *pOut,float t)
{
    *pOut = ImPlot::LerpColormap(t);
}
CIMGUI_API void ImPlot_NextColormapColor(ImVec4 *pOut)
{
    *pOut = ImPlot::NextColormapColor();
}
CIMGUI_API void ImPlot_ShowColormapScale(double scale_min,double scale_max,float height)
{
    return ImPlot::ShowColormapScale(scale_min,scale_max,height);
}
CIMGUI_API const char* ImPlot_GetColormapName(ImPlotColormap colormap)
{
    return ImPlot::GetColormapName(colormap);
}
CIMGUI_API ImPlotInputMap* ImPlot_GetInputMap()
{
    return &ImPlot::GetInputMap();
}
CIMGUI_API ImDrawList* ImPlot_GetPlotDrawList()
{
    return ImPlot::GetPlotDrawList();
}
CIMGUI_API void ImPlot_PushPlotClipRect()
{
    return ImPlot::PushPlotClipRect();
}
CIMGUI_API void ImPlot_PopPlotClipRect()
{
    return ImPlot::PopPlotClipRect();
}
CIMGUI_API bool ImPlot_ShowStyleSelector(const char* label)
{
    return ImPlot::ShowStyleSelector(label);
}
CIMGUI_API bool ImPlot_ShowColormapSelector(const char* label)
{
    return ImPlot::ShowColormapSelector(label);
}
CIMGUI_API void ImPlot_ShowStyleEditor(ImPlotStyle* ref)
{
    return ImPlot::ShowStyleEditor(ref);
}
CIMGUI_API void ImPlot_ShowUserGuide()
{
    return ImPlot::ShowUserGuide();
}
CIMGUI_API void ImPlot_ShowMetricsWindow(bool* p_popen)
{
    return ImPlot::ShowMetricsWindow(p_popen);
}
CIMGUI_API void ImPlot_SetImGuiContext(ImGuiContext* ctx)
{
    return ImPlot::SetImGuiContext(ctx);
}
CIMGUI_API void ImPlot_ShowDemoWindow(bool* p_open)
{
    return ImPlot::ShowDemoWindow(p_open);
}


//ImPlotPoint getters manually wrapped for taking getters modifying ImPlotPoint*

ImPlotPoint_getter getter_funcX;
ImPlotPoint_getter getter_funcX2;

ImPlotPoint Wrapper(void* data, int idx)
{
	ImPlotPoint pp;
	getter_funcX(data, idx, &pp);
	return pp;
}

ImPlotPoint Wrapper2(void* data, int idx)
{
	ImPlotPoint pp;
	getter_funcX2(data, idx, &pp);
	return pp;
}

CIMGUI_API void ImPlot_PlotLineG(const char* label_id, ImPlotPoint_getter getter,void* data,int count,int offset)
{
    getter_funcX = getter;
	ImPlot::PlotLineG(label_id,Wrapper,data,count,offset);
}

CIMGUI_API  void ImPlot_PlotScatterG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, int offset)
{
	getter_funcX = getter;
	ImPlot::PlotScatterG(label_id, Wrapper, data, count, offset);
}

CIMGUI_API void ImPlot_PlotShadedG(const char* label_id, ImPlotPoint_getter getter1, void* data1, ImPlotPoint_getter getter2, void* data2, int count, int offset)
{
	getter_funcX = getter1;
	getter_funcX2 = getter2;
	ImPlot::PlotShadedG(label_id, Wrapper, data1, Wrapper2, data2, count, offset);
}

CIMGUI_API void ImPlot_PlotBarsG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, double width, int offset)
{
	getter_funcX = getter;
	ImPlot::PlotBarsG(label_id, Wrapper, data, count, width, offset);
}

CIMGUI_API void ImPlot_PlotBarsHG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, double height,  int offset)
{
	getter_funcX = getter;
	ImPlot::PlotBarsHG(label_id, Wrapper, data, count, height, offset);
}

CIMGUI_API void ImPlot_PlotDigitalG(const char* label_id, ImPlotPoint_getter getter, void* data, int count, int offset)
{
	getter_funcX = getter;
	ImPlot::PlotDigitalG(label_id, Wrapper, data, count, offset);
}