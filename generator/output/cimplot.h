//This file is automatically generated by generator.lua from https://github.com/cimgui/cimgui
//based on implot.h file version 0.2 WIP from Dear ImGui https://github.com/ocornut/imgui
#ifndef CIMGUIPLOT_INCLUDED
#define CIMGUIPLOT_INCLUDED
#include <stdio.h>
#include <stdint.h>
#if defined _WIN32 || defined __CYGWIN__
    #ifdef CIMGUI_NO_EXPORT
        #define API
    #else
        #define API __declspec(dllexport)
    #endif
    #ifndef __GNUC__
    #define snprintf sprintf_s
    #endif
#else
    #ifdef __GNUC__
        #define API  __attribute__((__visibility__("default")))
    #else
        #define API
    #endif
#endif

#if defined __cplusplus
    #define EXTERN extern "C"
#else
    #include <stdarg.h>
    #include <stdbool.h>
    #define EXTERN extern
#endif

#define CIMGUI_API EXTERN API
#define CONST const


#ifdef _MSC_VER
typedef unsigned __int64 ImU64;
#else
//typedef unsigned long long ImU64;
#endif


#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef struct ImPlotStyle ImPlotStyle;
typedef struct ImPlotLimits ImPlotLimits;
typedef struct ImPlotRange ImPlotRange;

typedef int ImPlotFlags;
typedef int ImPlotAxisFlags;
typedef int ImPlotCol;
typedef int ImPlotStyleVar;
typedef int ImPlotMarker;
typedef enum {
    ImPlotFlags_MousePos = 1 << 0,
    ImPlotFlags_Legend = 1 << 1,
    ImPlotFlags_Highlight = 1 << 2,
    ImPlotFlags_BoxSelect = 1 << 3,
    ImPlotFlags_Query = 1 << 4,
    ImPlotFlags_ContextMenu = 1 << 5,
    ImPlotFlags_Crosshairs = 1 << 6,
    ImPlotFlags_CullData = 1 << 7,
    ImPlotFlags_AntiAliased = 1 << 8,
    ImPlotFlags_NoChild = 1 << 9,
    ImPlotFlags_YAxis2 = 1 << 10,
    ImPlotFlags_YAxis3 = 1 << 11,
    ImPlotFlags_Default = ImPlotFlags_MousePos | ImPlotFlags_Legend | ImPlotFlags_Highlight | ImPlotFlags_BoxSelect | ImPlotFlags_ContextMenu | ImPlotFlags_CullData
}ImPlotFlags_;
typedef enum {
    ImPlotAxisFlags_GridLines = 1 << 0,
    ImPlotAxisFlags_TickMarks = 1 << 1,
    ImPlotAxisFlags_TickLabels = 1 << 2,
    ImPlotAxisFlags_Invert = 1 << 3,
    ImPlotAxisFlags_LockMin = 1 << 4,
    ImPlotAxisFlags_LockMax = 1 << 5,
    ImPlotAxisFlags_Adaptive = 1 << 6,
    ImPlotAxisFlags_LogScale = 1 << 7,
    ImPlotAxisFlags_Scientific = 1 << 8,
    ImPlotAxisFlags_Default = ImPlotAxisFlags_GridLines | ImPlotAxisFlags_TickMarks | ImPlotAxisFlags_TickLabels | ImPlotAxisFlags_Adaptive,
    ImPlotAxisFlags_Auxiliary = ImPlotAxisFlags_Default & ~ImPlotAxisFlags_GridLines,
}ImPlotAxisFlags_;
typedef enum {
    ImPlotCol_Line,
    ImPlotCol_Fill,
    ImPlotCol_MarkerOutline,
    ImPlotCol_MarkerFill,
    ImPlotCol_ErrorBar,
    ImPlotCol_FrameBg,
    ImPlotCol_PlotBg,
    ImPlotCol_PlotBorder,
    ImPlotCol_XAxis,
    ImPlotCol_YAxis,
    ImPlotCol_YAxis2,
    ImPlotCol_YAxis3,
    ImPlotCol_Selection,
    ImPlotCol_Query,
    ImPlotCol_COUNT
}ImPlotCol_;
typedef enum {
    ImPlotStyleVar_LineWeight,
    ImPlotStyleVar_Marker,
    ImPlotStyleVar_MarkerSize,
    ImPlotStyleVar_MarkerWeight,
    ImPlotStyleVar_ErrorBarSize,
    ImPlotStyleVar_ErrorBarWeight,
    ImPlotStyleVar_DigitalBitHeight,
    ImPlotStyleVar_DigitalBitGap,
    ImPlotStyleVar_COUNT
}ImPlotStyleVar_;
typedef enum {
    ImPlotMarker_None = 1 << 0,
    ImPlotMarker_Circle = 1 << 1,
    ImPlotMarker_Square = 1 << 2,
    ImPlotMarker_Diamond = 1 << 3,
    ImPlotMarker_Up = 1 << 4,
    ImPlotMarker_Down = 1 << 5,
    ImPlotMarker_Left = 1 << 6,
    ImPlotMarker_Right = 1 << 7,
    ImPlotMarker_Cross = 1 << 8,
    ImPlotMarker_Plus = 1 << 9,
    ImPlotMarker_Asterisk = 1 << 10,
}ImPlotMarker_;
struct ImPlotRange
{
    float Min, Max;
};
struct ImPlotLimits
{
    ImPlotRange X, Y;
};
struct ImPlotStyle
{
    float LineWeight;
    ImPlotMarker Marker;
    float MarkerSize;
    float MarkerWeight;
    float ErrorBarSize;
    float ErrorBarWeight;
    float DigitalBitHeight;
    float DigitalBitGap;
    ImVec4 Colors[ImPlotCol_COUNT];
};
#else

#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API ImPlotRange* ImPlotRange_ImPlotRange(void);
CIMGUI_API void ImPlotRange_destroy(ImPlotRange* self);
CIMGUI_API bool ImPlotRange_Contains(ImPlotRange* self,float value);
CIMGUI_API float ImPlotRange_Size(ImPlotRange* self);
CIMGUI_API ImPlotLimits* ImPlotLimits_ImPlotLimits(void);
CIMGUI_API void ImPlotLimits_destroy(ImPlotLimits* self);
CIMGUI_API bool ImPlotLimits_Contains(ImPlotLimits* self,const ImVec2 p);
CIMGUI_API void ImPlotLimits_Size(ImVec2 *pOut,ImPlotLimits* self);
CIMGUI_API ImPlotStyle* ImPlotStyle_ImPlotStyle(void);
CIMGUI_API void ImPlotStyle_destroy(ImPlotStyle* self);
CIMGUI_API bool igBeginPlot(const char* title_id,const char* x_label,const char* y_label,const ImVec2 size,ImPlotFlags flags,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags,ImPlotAxisFlags y2_flags,ImPlotAxisFlags y3_flags);
CIMGUI_API void igEndPlot(void);
CIMGUI_API void igPlotFloatPtrInt(const char* label_id,const float* values,int count,int offset,int stride);
CIMGUI_API void igPlotFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void igPlotVec2Ptr(const char* label_id,const ImVec2* data,int count,int offset);
CIMGUI_API void igPlotFnPtr(const char* label_id,ImVec2(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void igBarFloatPtrInt(const char* label_id,const float* values,int count,float width,float shift,int offset,int stride);
CIMGUI_API void igBarFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,float width,int offset,int stride);
CIMGUI_API void igBarFnPtr(const char* label_id,ImVec2(*getter)(void* data,int idx),void* data,int count,float width,int offset);
CIMGUI_API void igBarHFloatPtrInt(const char* label_id,const float* values,int count,float height,float shift,int offset,int stride);
CIMGUI_API void igBarHFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,float height,int offset,int stride);
CIMGUI_API void igBarHFnPtr(const char* label_id,ImVec2(*getter)(void* data,int idx),void* data,int count,float height,int offset);
CIMGUI_API void igErrorBarsFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,int offset,int stride);
CIMGUI_API void igErrorBarsFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,int offset,int stride);
CIMGUI_API void igErrorBarsFnPtr(const char* label_id,ImVec4(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void igPieChart(const char** label_ids,float* values,int count,const ImVec2 center,float radius,bool show_percents,float angle0);
CIMGUI_API void igDigitalFloatPtr(const char* label_id,const float* xs,const float* ys,int count,int offset,int stride);
CIMGUI_API void igDigitalFnPtr(const char* label_id,ImVec2(*getter)(void* data,int idx),void* data,int count,int offset);
CIMGUI_API void igText(const char* text,float x,float y,bool vertical,const ImVec2 pixel_offset);
CIMGUI_API bool igIsPlotHovered(void);
CIMGUI_API void igGetPlotMousePos(ImVec2 *pOut,int y_axis);
CIMGUI_API ImPlotLimits igGetPlotLimits(int y_axis);
CIMGUI_API bool igIsPlotQueried(void);
CIMGUI_API ImPlotLimits igGetPlotQuery(int y_axis);
CIMGUI_API ImPlotStyle* igGetStyle(void);
CIMGUI_API void igSetPalette(const ImVec4* colors,int num_colors);
CIMGUI_API void igRestorePalette(void);
CIMGUI_API void igPushStyleColorU32(ImPlotCol idx,ImU32 col);
CIMGUI_API void igPushStyleColorVec4(ImPlotCol idx,const ImVec4 col);
CIMGUI_API void igPopStyleColor(int count);
CIMGUI_API void igPushStyleVarFloat(ImPlotStyleVar idx,float val);
CIMGUI_API void igPushStyleVarInt(ImPlotStyleVar idx,int val);
CIMGUI_API void igPopStyleVar(int count);
CIMGUI_API void igSetNextPlotLimits(float x_min,float x_max,float y_min,float y_max,ImGuiCond cond);
CIMGUI_API void igSetNextPlotLimitsX(float x_min,float x_max,ImGuiCond cond);
CIMGUI_API void igSetNextPlotLimitsY(float y_min,float y_max,ImGuiCond cond,int y_axis);
CIMGUI_API void igSetPlotYAxis(int y_axis);
CIMGUI_API void igGetPlotPos(ImVec2 *pOut);
CIMGUI_API void igGetPlotSize(ImVec2 *pOut);
CIMGUI_API void igPixelsToPlot(ImVec2 *pOut,const ImVec2 pix,int y_axis);
CIMGUI_API void igPlotToPixels(ImVec2 *pOut,const ImVec2 plt,int y_axis);
CIMGUI_API void igPushPlotClipRect(void);
CIMGUI_API void igPopPlotClipRect(void);
CIMGUI_API void igShowDemoWindow(bool* p_open);



#endif //CIMGUIPLOT_INCLUDED




